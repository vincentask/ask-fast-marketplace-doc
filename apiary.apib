FORMAT: 1A
HOST: http://askfastmarket.appspot.com

# Ask Fast Marketplace

# Group Getting started

The marketplace is an extension to the Ask Fast API. This gives you the possibility to host your questions and answers on our servers. so you do not have to program anything on the server side. 
Send your first message
The base URL is: http://askfastmarket.appspot.com.

To send your first message you have to give some information to the Market place. This includes the people whom you want to send you message to, the method of senden, etc. The example gives the bare minimum that the server needs to send a message. If you like to add more specific functionality all the parameters can be found at the documentation
To send the request you send a json with the question and the addresses to the server. 

## send first message [/products/broadcastnew/appid={appid}&instanceid={instanceid}]

### send message [POST]


body parameters:

| name        | type           | description  |
| ------------- |:---------:| -----|
| `adresses`    | arrray    | addapters (SMS, EMAIL, etc) each array should have an array of adresses in the format: “adress”:”test@email.com” |
| `senderName`  | string    | The name you want to appear to be the sender of the message |
| `message`     | string    | The body of the message. This should be short for sms texting |
|`retryMethod`  |string     |AUTO or MANUAL -> if auto the system will repead as many times as set in the retry limit until there is a awnswer
|`retryLimit`   |number     |Amout of times the server sends the message if there is no response
|`broadcastName`|string     |Custom name to describe this broadcast|
|`emailSubject` |string     |Only used for emailing, this sets the subject of the email|

header parameters

| name        | type           | description  |
| ------------- |:---------:| -----|
| `bearertoken`    | string    | bearer token can be found at the developer page |


+ parameters
    + appid (required, String, `xxxxxxxx`) ... String `appid` of your aplication can be found in the developer page
    + instanceid (required, String, `xxxxx`) ... String `instanceid` of your aplication can be found in the developer page
    
    

+ request

    
        {
                "addresses": {
                "EMAIL": [
                {
                    "address": "test@email.com"
                }
            ],
                "SMS": [
                {
                    "address": "06000000000"
                }
            ]
            },
            "senderName": "vincent",
            "message": "post man test",
            "retryMethod": "MANUAL",
            "retryLimit": 1,
            "emailSubject": "post man test"
        }
    

+ headers

            bearertoken:xxxxxxxxxxxx
        

+ response 200 (aplication/json)
    
        {
        "broadcast": {
        "addresses": {
            "SMS": [
                {
                    "address": "number",
                    "adapterId": "5cc9c390-d1fb-11e3-9807-061c2777aa3c",
                    "addressInfo": "Netherlands: 0031624107729",
                    "contactName": ""
                }
            ],
            "EMAIL": [
                {
                    "address": "email",
                    "adapterId": "53dffd50-d203-11e3-b959-061c2777aa3c",
                    "contactName": ""
                }
            ]
        },
            "adapterList": {},
            "language": "nl-nl",
            "senderName": "SenderName",
            "emailSubject": "emailSubjectt",
            "message": "Your message",
            "broadcastName": "Your broadcast name",
            "questionType": "[OPEN | COMMENT \ CLOSED] ",
            "answers": [],
            "timeStamp": 1399627155706,
            "retryCount": 0,
            "retryLimit": 1,
            "retryMethod": "MANUAL"
        },
            "id": 6246531984261120,
            "broadcastCount": 2,
            "retryInfos": {},
            "ownerKey": "vincent"
        }

## get response of your message [/resource/examples/clipboard]

### get response [GET]


+ response 200 (aplication/json)

        {
            "id": "DEVELOPER_APP:ED486F0A-3F45-455B-B72B-CD9B0527746C_1399374502923",
            "timestamp": 1399374503894,
            "clipboardKey": "DEVELOPER_APP",
            "instanceId": "ED486F0A-3F45-455B-B72B-CD9B0527746C",
            "clipboardMap": {
                "adapterType": "XMPP",
                "responder_name": "",
                "question_id": "0978825a-59e0-4c75-bf4c-f45420a0325a",
                "responder": "vincentvw91@gmail.com",
                "question": 
                    "{"preferred_language":"nl-nl",
                    "question_id":"0978825a-59e0-4c75-bf4c-f45420a0325a",
                    "question_text":"text://hallo",
                    "type":"open","answers":[
                        {"answer_id":"0b594c0b-1ef2-4317-9e74-9d920dbc185b",
                        "answer_text":"Dank u voor uw reactie",
                        "callback":"http://askfastmarket.appspot.com:80/resource/question?url=Dank+u+voor+uw+reactie&lang=nl-nl&questionId=0978825a-59e0-4c75-bf4c-f45420a0325a&forTTS=false&appId=DEVELOPER_APP%3AED486F0A-3F45-455B-B72B-CD9B0527746C&username=vincent&password=eadeb77d8fba90b42b32b7de13e8aaa6"}
                        ],
                    "event_callbacks":[],
                    "media_properties":
                        [
                            {"medium":"BROADSOFT",
                            "properties":
                            {"DTMF_TERMINATE":"true",
                            "VOICE_MESSAGE_BEEP":"true",
                            "TIMEOUT":"15",
                            "RETRY_LIMIT":"5"}}
                        ]
                    }",
                "status": "Awaiting Response",
                "answer_text": "N/A"
            },
            "ownerKey": "vincent"
        }

# group Api documentation

## login [/login?username={username}&password={password}]

### login [GET]

+ Parameters
    + username (required, String , `vincent`)... String `username` of the user.
    + password (required, String , `xxxxxxx`) ... String `password` of the user.

+ response 200 (aplication/json)
    
        {
          "X-session_id": "xxxxxxxxxxxxxxxxxxxx"
        }

+ response 400 ()

## get all contacts [/accounts/contacts?detailed={detailed}&limit={limit}&offset={offset}&orderby={orderby}&fetchOwener={fetchowner}]

The market place can also serve as a contact book to make it more convinient to store and retrieve contacts
Contacts are set up as follows:

        {
            "id": 3,
            "contactInfo": "1234567890",
            "firstName": "Test",
            "lastName": "Customer",
            "contactInfoTag": "Name"|"Phone"|"Voip"|"Email"|"Fax"|"Address"|"DOB"|
            "PURCHASED_NUMBER"|"Special"|"Other",
            "label" : "Office",
            "contactKey": 1,
            "groupKeys": [1, 2, 3]
        }


| name        | type           | description  |
| ------------- |:---------:| -----|
| `id`    | string    | id of the contact |
|`contactInfo`|string||
|`contactInfoTag`|String||
|`contactKey`|number||
|`groupKeys`|array|numbers of the group in which the contact is in|


### get all contact [GET]

+ parameters
    + detailed (optional, String , `true`)... String `true` [true|false] When set to true Fetches all the contactInfos linked to each Contact, else only fetches the contactInfo ids linked to each contact.
    + limit (optional, int , `50`)... int The number of Contact resources that must be fetched in this call. This is applicable only when orderBy is null. 
    + offset (optional, int , `0`)... String The offset from which the contact resources must be retrieved. This is ideal for implementing a paging mechanism. Like limit, this is applicable only when orderBy is null.
    + orderby (optional, String , `true`)... String [“contactInfo” | “firstName” | “lastName”] The index key on which the sorting has to be performed. Contact resources can be sorted based on either the “contactInfo”, “firstName” or “lastName”. Any other indexes will not fetch any results for the GET request. 
    + fetchowner (optional, String , `true`)... String  [true|false] By default this call fetches all the Contacts, including the Contact of the currently logged in user (Owner Contact). If fetchOwner is set to false, it will ignore the owner contact and fetch the rest. Typically used in a phonebook application.

+ response 200 (aplication/json)

        {
            "contactInfoRefs": [
                2,
                3
            ],
            "lastAvailableTime": 1370372753829,
            "id": 1
        }


## create a contact [/accounts/contacts]

### create a contact [POST]




+ request

        {
            "id": 3,
            "contactInfo": "1234567890",
            "firstName": "Test",
            "lastName": "Customer",
            "contactInfoTag": "Name"|"Phone"|"Voip"|"Email"|"Fax"|"Address"|"DOB"|
            "PURCHASED_NUMBER"|"Special"|"Other",
            "label" : "Office",
            "contactKey": 1,
            "groupKeys": [1, 2, 3]
        }
        

+ response 200 (aplication/json)

        {
            "id": 3,
            "contactInfo": "1234567890",
            "firstName": "Test",
            "lastName": "Customer",
            "contactInfoTag": "Name"|"Phone"|"Voip"|"Email"|"Fax"|"Address"|"DOB"|
            "PURCHASED_NUMBER"|"Special"|"Other",
            "label" : "Office",
            "contactKey": 1,
            "groupKeys": [1, 2, 3]
        }

## handle contacts [/accounts/contacts/{contactId}]

### get contact [GET]




+ response 200 (aplication/json)
    
        {
            "id": 3,
            "contactInfo": "1234567890",
            "firstName": "Test",
            "lastName": "Customer",
            "contactInfoTag": "Name"|"Phone"|"Voip"|"Email"|"Fax"|"Address"|"DOB"|
            "PURCHASED_NUMBER"|"Special"|"Other",
            "label" : "Office",
            "contactKey": 1,
            "groupKeys": [1, 2, 3]
        }

### update contact [PUT]



+ request

        {
            "id": 3,
            "contactInfo": "1234567890",
            "firstName": "Test",
            "lastName": "Customer",
            "contactInfoTag": "Name"|"Phone"|"Voip"|"Email"|"Fax"|"Address"|"DOB"|
            "PURCHASED_NUMBER"|"Special"|"Other",
            "label" : "Office",
            "contactKey": 1,
            "groupKeys": [1, 2, 3]
        }

+ response 200 (aplication/json)

        {
            "id": 3,
            "contactInfo": "1234567890",
            "firstName": "Test",
            "lastName": "Customer",
            "contactInfoTag": "Name"|"Phone"|"Voip"|"Email"|"Fax"|"Address"|"DOB"|
            "PURCHASED_NUMBER"|"Special"|"Other",
            "label" : "Office",
            "contactKey": 1,
            "groupKeys": [1, 2, 3]
        }

### delete contact [DELETE]

+ response 200 

        {
        status code: 200
        }

## messages [/products/broadcastnew]

### send new message manual [POST]

body parameters

| name          | type           | description  |
| ------------- |:---------:| -----|
| `adapterType` | string    | addapters [SMS | CALL | EMAIL | XMPP | FACEBOOK | TWITTER] |
| `adresses`    | arrray    | addapters (SMS, EMAIL, etc) each array should have an array of adresses in the format: “adress”:”test@email.com” |
| `senderName`  | string    | The name you want to appear to be the sender of the message |
| `message`     | string    | The body of the message. This should be short for sms texting |
|`retryMethod`  | string    |AUTO or MANUAL -> if auto the system will repead as many times as set in the retry limit until there is a awnswer
|`retryLimit`   | number    |Amout of times the server sends the message if there is no response
|`broadcastName`| string    |Custom name to describe this broadcast|
|`emailSubject` | string    |Only used for emailing, this sets the subject of the email|
+ request

        {
            "addresses": {
                "<AdapterType>": [
                {
                    "address": "<email address1>”
                }
                {
                    "address": "<email address2>”
                }
                ]
            },
                "adapterList": {
                "<AdapterType>": "<calling adapterId>"
            },
            "senderName": "<senderName (used for all but CALL channel)>",
            "message": "Test message",
            "audio": "http://autioURL.wav",
            "retryMethod": "AUTO|MANUAL",
            "retryLimit": <retryLimit>,
            "broadcastName": "<Custom name to describe this broadcast>",
            "emailSubject": "<email subject (used only for EMAIL channel)>",
            "language": "<language codes described>"
        }

   




+ response 200 (application/json)

        {
            "broadcast": {
               "addresses": {
                    "EMAIL": [
                      {
                         "address": "sshetty@ask-cs.com",
                            "responseMessage": "No adapters of Type: EMAIL found for user: root",
                            "contactName": "John Dunbar"
                       }
                    ]
                },
                "adapterList": {
                    "CALL": "151b05e0-25f3-11e3-a6c7-00007f000001"
                },
                "senderName": "Broadcast message",
                "emailSubject": "Test message",
                "message": "This is a test message",
                "broadcastName": "This is my broadcast",
                "timeStamp": 1383935826888,
                "language": <language codes described>,
                "retryCount": 5,
                "retryLimit": 5,
                "retryMethod": "AUTO"
            },
            "id": 5910974510923776,
            "broadcastCount": 1,
            "retryInfos": {
            "EMAIL": [
            {
                "address": "sshetty@ask-cs.com",
                "responseMessage": "No adapters of Type: EMAIL found for user: root",
                "contactName": "John Dunbar"
            }
                ]
            }
        }




### retrieve all messages [GET]

+ response 200 (application/json) 

        {
            "broadcast": {
               "addresses": {
                    "EMAIL": [
                      {
                         "address": "sshetty@ask-cs.com",
                            "responseMessage": "No adapters of Type: EMAIL found for user: root",
                            "contactName": "John Dunbar"
                       }
                    ]
                },
                "adapterList": {
                    "CALL": "151b05e0-25f3-11e3-a6c7-00007f000001"
                },
                "senderName": "Broadcast message",
                "emailSubject": "Test message",
                "message": "This is a test message",
                "broadcastName": "This is my broadcast",
                "timeStamp": 1383935826888,
                "language": <language codes described>,
                "retryCount": 5,
                "retryLimit": 5,
                "retryMethod": "AUTO"
            },
            "id": 5910974510923776,
            "broadcastCount": 1,
            "retryInfos": {
            "EMAIL": [
            {
                "address": "sshetty@ask-cs.com",
                "responseMessage": "No adapters of Type: EMAIL found for user: root",
                "contactName": "John Dunbar"
            }
                ]
            }
        }
        
## retrieve broadcast [/products/broadcastnew/{broadcastid}]

### retrieve specifiec broadcast [GET]

+ parameters
    + broadcastid (required, String, `xxxxxx`) .... String `xxxxxxxx` the id the broadcast

+ response 200 (application/json) 

        {
            "broadcast": {
               "addresses": {
                    "EMAIL": [
                      {
                         "address": "sshetty@ask-cs.com",
                            "responseMessage": "No adapters of Type: EMAIL found for user: root",
                            "contactName": "John Dunbar"
                       }
                    ]
                },
                "adapterList": {
                    "CALL": "151b05e0-25f3-11e3-a6c7-00007f000001"
                },
                "senderName": "Broadcast message",
                "emailSubject": "Test message",
                "message": "This is a test message",
                "broadcastName": "This is my broadcast",
                "timeStamp": 1383935826888,
                "language": <language codes described>,
                "retryCount": 5,
                "retryLimit": 5,
                "retryMethod": "AUTO"
            },
            "id": 5910974510923776,
            "broadcastCount": 1,
            "retryInfos": {
            "EMAIL": [
            {
                "address": "sshetty@ask-cs.com",
                "responseMessage": "No adapters of Type: EMAIL found for user: root",
                "contactName": "John Dunbar"
            }
                ]
            }
        }

### delete specific broadcast [DELETE]

+ parameters
    + broadcastid (required, String, `xxxxxx`) .... String `xxxxxxxx` the id the broadcast

+ response 200 

        ok




















