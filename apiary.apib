FORMAT: 1A
HOST: http://askfastmarket.appspot.com

# Ask Fast Marketplace

<br>

### This document is a work in progress

<br>

#### Api end point: http://askfastmarket.appspot.com

The marketplace is an extension to the Ask Fast API, which can be found [here](http://docs.askfast.apiary.io/). This gives you the possibility to host your questions and answers on our servers, so you do not have to program anything on the server side. 


## Authentication

For authentication the marketplace uses a session id token, this can be retrieved with the login call. This token has to be sent in every call to the server in the header.

## Error handling

Ask Fast marketplace uses regular HTTP response codes to indicate success or failure of the API request. A 200 response indicates a succesfull request. The 4xx response often means an error from the user side, this could be an invalid request or a not authorised (401).

Overview of HTTP response codes:

- 200 → Everything went smoothly.
- 400 → Bad request maybe a parameter is missing?
- 401 → Not authorised, the authorisation failed.
- 404 → Request not found.
- 5xx → internal server error, we try to make the error logs easy for you to read.


## Dates

All dates are standard UNIX (epoch) coded. This represents the seconds passed since 01-01-1970. Some examples:

- 1396350000 - 12:00:00 01-01-2014
- 946728000   - 12:00:00 01-01-2000


## Pagination

At the moment the pagination limitation is a 1000 responses per call. If you wish to go back even further you can change the date attribute, to fetch the results for a certain period.  

## Rate limiting
The Ask Fast API uses a fair use policy; if you don't abuse the system you don't have a rate limit.

## Language codes

If you want to make a call and use Text To Speech (TTS) you can use the following language codes

|codes|langue|
|----|---|
|ca-es|Catalan|
|zh-cn|Chinese (China)|
|zh-hk|Chinese (Hong Kong)|
|zh-tw|Chinese (Taiwan)|
|da-dk|Danish|
|nl-nl|Dutch|
|en-au|English (Australia)|
|en-ca|English (Canada)|
|en-gb|English (Great Britain)|
|en-in|English (India)|
|en-us|English (United States)|
|fi-fi|Finnish|
|fr-ca|French (Canada)|
|fr-fr|French (France)|
|de-de|German|
|it-it|Italian|
|ja-jp|Japanese|
|ko-kr|Korean|
|nb-no|Norwegian
|pl-pl|Polish|
|pt-br|Portuguese (Brazil)|
|pt-pt|Portuguese (Portugal)|
|ru-ru|Russian|
|es-mx|Spanish (Mexico)|
|es-es|Spanish (Spain)|
|sv-se|Swedish (Sweden)|

# Group Getting started


To send your first message you have to give some information to the Marketplace. This includes the people whom you want to send your message to, the method of sending, etc. The following example showes the bare minimum that the server needs to send a message. If you want to add more specific functionalities, all the parameters can be found in the documentation
To send the request you send a json with the question and the addresses to the server. 

## send First message [/products/broadcastnew/appid={appid}&instanceid={instanceid}]

### Send message [POST]

#### */products/broadcastnew/appid={appid}&instanceid={instanceid}*

##### url parameters:

| name          | description  |
| ------------- | -----|
| `appid`    | An app id of your chosing, so you can identify your resposes easily |
| `instanceid`  | An extra id to indentify your question|


##### body parameters:

To send this message always log in first and use the session-id in the header. How to log in can be found in the documentation.

| name          | type      | description  |
| ------------- |:---------:| -----|
| `adresses`    | arrray    | adapters (SMS, EMAIL, etc) each adapter should have an array of adresses in the format: “adress”:”test@email.com” |
| `senderName`  | string    | The name you want to appear as the sender of the message |
| `message`     | string    | The body of the message. This should be short for sms texting |
|`retryMethod`  |string     |AUTO or MANUAL -> if AUTO the system will repeat as many times as set in the retry limit until there is an answer
|`retryLimit`   |number     |Amount of times the server sends the message if there is no response
|`broadcastName`|string     |Custom name to describe this broadcast|
|`emailSubject` |string     |Only used for emailing, this sets the subject of the email|

#####header parameters

| name          | type           | description  |
| ------------- |:---------:| -----|
| `X-SESSION_ID`| string    | bearer token can be found on the developer page |


+ parameters
    + appid (optional, String, `xxxxxxxx`) ... String `appid` of your aplication can be found in the developer page
    + instanceid (optional, String, `xxxxx`) ... String `instanceid` of your aplication can be found in the developer page
    
    

+ request

    
        {
                "addresses": {
                "EMAIL": [
                {
                    "address": "test@email.com"
                }
            ],
                "SMS": [
                {
                    "address": "06000000000"
                }
            ]
            },
            "senderName": "vincent",
            "message": "post man test",
            "retryMethod": "MANUAL",
            "retryLimit": 1,
            "emailSubject": "post man test"
        }
    

+ headers

            X-SESSION_ID:xxxxxxxxxxxx
            Content-Type:application/json
        

+ response 200 (aplication/json)
    
        {
        "broadcast": {
        "addresses": {
            "SMS": [
                {
                    "address": "number",
                    "adapterId": "xxxxxxxxxxxxxxxxxxxxxxxxxxx",
                    "addressInfo": "Netherlands: xxxxxxxxxxxx",
                    "contactName": ""
                }
            ],
            "EMAIL": [
                {
                    "address": "email",
                    "adapterId": "xxxxxxxxxxxxxxxxxxxxxxx",
                    "contactName": "hello"
                }
            ]
        },
            "adapterList": {},
            "language": "nl-nl",
            "senderName": "SenderName",
            "emailSubject": "emailSubjectt",
            "message": "Your message",
            "broadcastName": "Your broadcast name",
            "questionType": "[OPEN | COMMENT \ CLOSED] ",
            "answers": [],
            "timeStamp": 1399627155706,
            "retryCount": 0,
            "retryLimit": 1,
            "retryMethod": "MANUAL"
        },
            "id": xxxxxxxxxxxxxxx,
            "broadcastCount": 2,
            "retryInfos": {},
            "ownerKey": "xxxxxxxxxxx"
        }

## Get response of your message [/resource/examples/clipboard]

### Get response [GET]

#### */resource/examples/clipboard*

+ headers

            X-SESSION_ID:xxxxxxxxxxxx
            Content-Type:application/json

+ response 200 (aplication/json)

        {
            "id": "xxxxxxxxxxxxxxxxxxxxxxx",
            "timestamp": 1399374503894,
            "clipboardKey": "DEVELOPER_APP",
            "instanceId": "xxxxxxxxxxxxxxxxxxxxxxxxxxxx",
            "clipboardMap": {
                "adapterType": "XMPP",
                "responder_name": "",
                "question_id": "xxxxxxxxxxxxxxx",
                "responder": "xxxxxxxxxxxxxxx",
                "question": 
                    "{"preferred_language":"nl-nl",
                    "question_id":"xxxxxxxxxxxxxxxxxxxxxxxxxx",
                    "question_text":"text://hallo",
                    "type":"open","answers":[
                        {"answer_id":"xxxxxxxxxxxxxxxxxxxxxxxx",
                        "answer_text":"Dank u voor uw reactie",
                        "callback":"http://askfastmarket.appspot.com:80/resource/question?url=Dank+u+voor+uw+reactie&lang=nl-nl&questionId=0978825a-59e0-4c75-bf4c-f45420a0325a&forTTS=false&appId=DEVELOPER_APP%3AED486F0A-3F45-455B-B72B-CD9B0527746C&username=vincent&password=eadeb77d8fba90b42b32b7de13e8aaa6"}
                        ],
                    "event_callbacks":[],
                    "media_properties":
                        [
                            {"medium":"BROADSOFT",
                            "properties":
                            {"DTMF_TERMINATE":"true",
                            "VOICE_MESSAGE_BEEP":"true",
                            "TIMEOUT":"15",
                            "RETRY_LIMIT":"5"}}
                        ]
                    }",
                "status": "Awaiting Response",
                "answer_text": "N/A"
            },
            "ownerKey": "vincent"
        }

# group API documentation


To send a request always send the sessid in the header, this can be retrieved with the login call. Make sure the aplication is of type: JSON

## Login [/login?username={username}&password={password}]

### Login [GET]

#### */login?username={username}&password={password}*

+ Parameters
    + username (required, String , `vincent`)... String `username` of the user.
    + password (required, String , `xxxxxxx`) ... String `password` MD5 hassed.

+ response 200 (aplication/json)
    
        {
          "X-session_ID": "xxxxxxxxxxxxxxxxxxxx"
        }

+ response 400 ()

## Get all contacts [/accounts/contacts?detailed={detailed}&limit={limit}&offset={offset}&orderby={orderby}&fetchOwener={fetchowner}]

The market place can also serve as a contact book to make it more convenient to store and retrieve contacts.
Contacts are set up as follows:

        {
            "id": 3,
            "contactInfo": "1234567890",
            "firstName": "Test",
            "lastName": "Customer",
            "contactInfoTag": "Name"|"Phone"|"Voip"|"Email"|"Fax"|"Address"|"DOB"|
            "PURCHASED_NUMBER"|"Special"|"Other",
            "label" : "Office",
            "contactKey": 1,
            "groupKeys": [1, 2, 3]
        }

#####parameters

| name              | type      | description   |
| ------------      |:---------:| -----         |
| `id`              | string    | id of the contact |
|`contactInfo`      |string     ||
|`contactInfoTag`   |String     ||
|`contactKey`       |number     ||
|`groupKeys`        |array      |numbers of the group in which the contact is in|


## Contacts [/accounts/contacts]

This interface has the CreateReadUpdateDelete methods for the Contact entity. 
Contact entity is the root reference for all contact infos. For example: Contact: Test Customer has mobile#: 1234567890 and email: testCustomer@test.com. 
In the backend, both mobile# and email are added as separate ContactInfo entities, with reference to the Contact (Test Customer). 
These contactInfos can belong to different Groups as well.

### Get all contact [GET]

#### */accounts/contacts*

+ headers

            X-SESSION_ID:xxxxxxxxxxxx
            Content-Type:application/json


+ parameters
    + detailed (optional, String , `true`)... String `true` [true|false] When set to true Fetches all the contactInfos linked to each Contact, else only fetches the contactInfo ids linked to each contact.
    + limit (optional, int , `50`)... int The number of Contact resources that must be fetched in this call. This is applicable only when orderBy is null. 
    + offset (optional, int , `0`)... String The offset from which the contact resources must be retrieved. This is ideal for implementing a paging mechanism. Like limit, this is applicable only when orderBy is null.
    + orderby (optional, String , `true`)... String [“contactInfo” | “firstName” | “lastName”] The index key on which the sorting has to be performed. Contact resources can be sorted based on either the “contactInfo”, “firstName” or “lastName”. Any other indexes will not fetch any results for the GET request. 
    + fetchowner (optional, String , `true`)... String  [true|false] By default this call fetches all the Contacts, including the Contact of the currently logged in user (Owner Contact). If fetchOwner is set to false, it will ignore the owner contact and fetch the rest. Typically used in a phonebook application.

+ response 200 (application/json)

        {
            "contactInfoRefs": [
                2,
                3
            ],
            "lastAvailableTime": 1370372753829,
            "id": 1
        }




### Create a contact [POST]

#### */accounts/contacts*

+ headers

            X-SESSION_ID:xxxxxxxxxxxx
            Content-Type:application/json


+ request

        {
            "id": 3,
            "contactInfo": "1234567890",
            "firstName": "Test",
            "lastName": "Customer",
            "contactInfoTag": "Name"|"Phone"|"Voip"|"Email"|"Fax"|"Address"|"DOB"|
            "PURCHASED_NUMBER"|"Special"|"Other",
            "label" : "Office",
            "contactKey": 1,
            "groupKeys": [1, 2, 3]
        }
        

+ response 200 (application/json)

        {
            "id": 3,
            "contactInfo": "1234567890",
            "firstName": "Test",
            "lastName": "Customer",
            "contactInfoTag": "Name"|"Phone"|"Voip"|"Email"|"Fax"|"Address"|"DOB"|
            "PURCHASED_NUMBER"|"Special"|"Other",
            "label" : "Office",
            "contactKey": 1,
            "groupKeys": [1, 2, 3]
        }

## handle contacts [/accounts/contacts/{contactId}]

### Get contact [GET]

#### */accounts/contacts*

+ headers

            X-SESSION_ID:xxxxxxxxxxxx
            Content-Type:application/json


+ response 200 (application/json)
    
        {
            "id": 3,
            "contactInfo": "1234567890",
            "firstName": "Test",
            "lastName": "Customer",
            "contactInfoTag": "Name"|"Phone"|"Voip"|"Email"|"Fax"|"Address"|"DOB"|
            "PURCHASED_NUMBER"|"Special"|"Other",
            "label" : "Office",
            "contactKey": 1,
            "groupKeys": [1, 2, 3]
        }

### Update contact [PUT]

#### */accounts/contacts*

+ headers

            X-SESSION_ID:xxxxxxxxxxxx
            Content-Type:application/json

+ request

        {
            "id": 3,
            "contactInfo": "1234567890",
            "firstName": "Test",
            "lastName": "Customer",
            "contactInfoTag": "Name"|"Phone"|"Voip"|"Email"|"Fax"|"Address"|"DOB"|
            "PURCHASED_NUMBER"|"Special"|"Other",
            "label" : "Office",
            "contactKey": 1,
            "groupKeys": [1, 2, 3]
        }

+ response 200 (aplication/json)

        {
            "id": 3,
            "contactInfo": "1234567890",
            "firstName": "Test",
            "lastName": "Customer",
            "contactInfoTag": "Name"|"Phone"|"Voip"|"Email"|"Fax"|"Address"|"DOB"|
            "PURCHASED_NUMBER"|"Special"|"Other",
            "label" : "Office",
            "contactKey": 1,
            "groupKeys": [1, 2, 3]
        }

### Delete contact [DELETE]

+ headers

            X-SESSION_ID:xxxxxxxxxxxx
            Content-Type:application/json

+ response 200 

        {
        status code: 200
        }

## Send messages [/products/broadcastnew]

### Send new message manual [POST]

#### */products/broadcastnew*

#####body parameters

| name          | type      | description  |
| ------------- |:---------:| -----|
| `adapterType` | string    | adapters [SMS | CALL | EMAIL | XMPP | FACEBOOK | TWITTER] |
| `adresses`    | arrray    | adapters (SMS, EMAIL, etc) each addapter should have an array of addresses in the format: “address”:”test@email.com” |
| `senderName`  | string    | The name you want to appear to be the sender of the message |
| `message`     | string    | The body of the message. This should be short for sms texting |
|`retryMethod`  | string    |AUTO or MANUAL -> if AUTO the system will repead as many times as set in the retry limit until there is an answer
|`retryLimit`   | number    |Amount of times the server sends the message if there is no response
|`broadcastName`| string    |Custom name to describe this broadcast|
|`emailSubject` | string    |Only used for emailing, this sets the subject of the email|


+ headers

            X-SESSION_ID:xxxxxxxxxxxx
            Content-Type:application/json

+ request

        {
            "addresses": {
                "<AdapterType>": [
                {
                    "address": "<email address1>”
                }
                {
                    "address": "<email address2>”
                }
                ]
            },
                "adapterList": {
                "<AdapterType>": "<calling adapterId>"
            },
            "senderName": "<senderName (used for all but CALL channel)>",
            "message": "Test message",
            "audio": "http://autioURL.wav",
            "retryMethod": "AUTO|MANUAL",
            "retryLimit": <retryLimit>,
            "broadcastName": "<Custom name to describe this broadcast>",
            "emailSubject": "<email subject (used only for EMAIL channel)>",
            "language": "<language codes described>"
        }

   




+ response 200 (application/json)

        {
            "broadcast": {
               "addresses": {
                    "EMAIL": [
                      {
                         "address": "xxxxxxxxxxxxxx",
                            "responseMessage": "hallo",
                            "contactName": "xxxxxxxxxx"
                       }
                    ]
                },
                "adapterList": {
                    "CALL": "xxxxxxxxxxxxxxxx"
                },
                "senderName": "Broadcast message",
                "emailSubject": "Test message",
                "message": "This is a test message",
                "broadcastName": "This is my broadcast",
                "timeStamp": 1383935826888,
                "language": <language codes described>,
                "retryCount": 5,
                "retryLimit": 5,
                "retryMethod": "AUTO"
            },
            "id": xxxxxxxxxxxxx,
            "broadcastCount": 1,
            "retryInfos": {
            "EMAIL": [
            {
                "address": "xxxxxxxxxxxxxxxx",
                "responseMessage": "No adapters of Type: EMAIL found for user: root",
                "contactName": "xxxxxxxxxxxxxx"
            }
                ]
            }
        }


+ response 403 

        {
            status: "UNAUTHORIZED_RESOURCE_ACCESS"
            message: "Invalid username or password"
            code: 403
            suppressed: [ ]
        }

+ response 415

        Error: Unsupported Media Type

### Retrieve answers [GET]

#### */products/broadcastnew*

+ headers

            X-SESSION_ID:xxxxxxxxxxxx
            Content-Type:application/json

+ response 200 (application/json) 

        {
            "broadcast": {
               "addresses": {
                    "EMAIL": [
                      {
                         "address": "xxxxxxxxxxxxxxxx",
                            "responseMessage": "No adapters of Type: EMAIL found for user: root",
                            "contactName": "xxxxxxxxxxxx"
                       }
                    ]
                },
                "adapterList": {
                    "CALL": "xxxxxxxxxxxxxxxxxxx"
                },
                "senderName": "Broadcast message",
                "emailSubject": "Test message",
                "message": "This is a test message",
                "broadcastName": "This is my broadcast",
                "timeStamp": 1383935826888,
                "language": <language codes described>,
                "retryCount": 5,
                "retryLimit": 5,
                "retryMethod": "AUTO"
            },
            "id": 5910974510923776,
            "broadcastCount": 1,
            "retryInfos": {
            "EMAIL": [
            {
                "address": "xxxxxxxxxxxxxxxxxxxx",
                "responseMessage": "xxxxxxxxxxxxxxxxxxxx",
                "contactName": "xxxxxxxxxxxxxxxxx"
            }
                ]
            }
        }
        
## Retrieve broadcast [/products/broadcastnew/{broadcastid}]

### Retrieve specifiec broadcast [GET]

#### */products/broadcastnew/{broadcastid}*

+ headers

            X-SESSION_ID:xxxxxxxxxxxx
            Content-Type:application/json

+ parameters
    + broadcastid (required, String, `xxxxxx`) ... string `xxxxxxxx` the id the broadcast

+ response 200 (application/json) 

        {
            "broadcast": {
               "addresses": {
                    "EMAIL": [
                      {
                         "address": "xxxxxxxxxxxxxxxxx",
                            "responseMessage": "No adapters of Type: EMAIL found for user: root",
                            "contactName": "xxxxxxxxxx"
                       }
                    ]
                },
                "adapterList": {
                    "CALL": "xxxxxxxxxxxxxxxxxxxxxxx"
                },
                "senderName": "Broadcast message",
                "emailSubject": "Test message",
                "message": "This is a test message",
                "broadcastName": "This is my broadcast",
                "timeStamp": 1383935826888,
                "language": <language codes described>,
                "retryCount": 5,
                "retryLimit": 5,
                "retryMethod": "AUTO"
            },
            "id": xxxxxxxxxxxxxxxxxxxxxxx,
            "broadcastCount": 1,
            "retryInfos": {
            "EMAIL": [
            {
                "address": "xxxxxxxxxxxxxxxxxxxxxxxx",
                "responseMessage": "xxxxxxxxxxxxxxxxxxxxxx",
                "contactName": "xxxxxxxxxxxxxxxxxxxx"
            }
                ]
            }
        }

### Delete specific broadcast [DELETE]

#### */products/broadcastnew/{broadcastid}*

+ headers

            X-SESSION_ID:xxxxxxxxxxxx
            Content-Type:application/json

+ parameters
    + broadcastid (required, String, `xxxxxx`) ... string `xxxxxxxx` the id the broadcast

+ response 200 

        ok

#group Support

For support you can check stack overflow with the tag ["ask-fast"](http://stackoverflow.com/questions/tagged/ask-fast) or the tag ["ask-fast-marketplace"]( http://stackoverflow.com/questions/tagged/ask-fast-marketplace)
If it is not there you can post questions with these tags.

If you realy want to speak to us please email us at: support@ask-fast.com


# group Developer portal

#### click <a href="http://dev.ask-fast.com" target="_blank"> here </a> to go to the developer portal



<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-51883335-1', 'apiary.io');
  ga('send', 'pageview');

</script>















